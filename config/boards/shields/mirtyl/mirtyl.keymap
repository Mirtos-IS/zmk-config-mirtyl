#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    flavor = "tap-preferred";
    quick-tap-ms = <200>;
    retro-tap;
};

&sk {
    quick-release;
};

&lt {
    quick-tap-ms = <200>;
};

/ {
    behaviors {
        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            global-quick-tap;
            bindings =
                <&kp>,
                <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Caps {
            timeout-ms = <50>;
            bindings = <&kp CAPSLOCK>;
            key-positions = <7 8 9>;
        };

        Ctrl_Backspace {
            timeout-ms = <50>;
            layers = <0 1>;
            bindings = <&kp ENTER>;
            key-positions = <8 9>;
        };

        shift_enter {
            bindings = <&Shift_enter>;
            key-positions = <9 7>;
        };

        open {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <7 19>;
        };

        close {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <9 21>;
        };

        new_combo {
            bindings = <&kp ENTER>;
            key-positions = <8 20>;
        };
    };

    macros {
        ctrl_backspace: ctrl_backspace {
            compatible = "zmk,behavior-macro";
            label = "new_macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RIGHT_CONTROL>,
                <&macro_tap>,
                <&kp BACKSPACE>,
                <&macro_release>,
                <&kp RIGHT_CONTROL>;
        };
        Shift_enter: Shift_enter {
            compatible = "zmk,behavior-macro";
            label = "new_macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT &kp ENTER>;
        };

        ZMK_MACRO(

        Macros_a_acute,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp A>,
            <&macro_release>,
            <&kp RALT>;

        )
        ZMK_MACRO(

        Macros_e_acute,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp E>,
            <&macro_release>,
            <&kp RALT>;

        )
        ZMK_MACRO(

        Macros_i_acute,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp I>,
            <&macro_release>,
            <&kp RALT>;

        )
        ZMK_MACRO(

        Macros_o_acute,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp O>,
            <&macro_release>,
            <&kp RALT>;

        )
        ZMK_MACRO(

        Macros_u_acute,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp U>,
            <&macro_release>,
            <&kp RALT>;

        )
        ZMK_MACRO(

        Macros_a_grave,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp GRAVE>,
            <&macro_release>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp A>;

        )
        ZMK_MACRO(

        Macros_a_caret,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp NUMBER_6>,
            <&macro_release>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp A>;

        )
        ZMK_MACRO(

        Macros_e_caret,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp NUMBER_6>,
            <&macro_release>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp E>;

        )
        ZMK_MACRO(

        Macros_o_caret,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp NUMBER_6>,
            <&macro_release>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp O>;

        )
        ZMK_MACRO(

        Macros_a_tilde,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp TILDE>,
            <&macro_release>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp A>;

        )
        ZMK_MACRO(

        Macros_o_tilde,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp TILDE>,
            <&macro_release>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp O>;

        )
        ZMK_MACRO(

        Cedilha,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings =
            <&macro_press>,
            <&kp RALT>,
            <&macro_tap>,
            <&kp COMMA>,
            <&macro_release>,
            <&kp RALT>;

        )
    };

    keymap {
        compatible = "zmk,keymap";

        Alpha {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
           &kp Y        &kp C             &kp L       &kp M      &kp K                             &kp Z        &kp F              &kp U  &lt 5 COMMA   &kp APOSTROPHE  
  &mt LEFT_GUI I  &mt LCTRL S  &mt LEFT_SHIFT R  &mt LALT T      &kp G                             &kp P   &mt LALT N  &mt RIGHT_SHIFT E  &mt RCTRL A  &mt RIGHT_GUI O  
           &kp Q        &kp V             &kp W       &kp D      &kp J                             &kp B        &kp H      &kp SEMICOLON      &kp DOT            &kp X  
                                  &none    &sk LEFT_SHIFT       &sl 1  &lt 2 ESC    &mt LS(LC(LA(LGUI))) BACKSPACE  &lt 4 SPACE          &lt 3 TAB &none
            >;
        };

};
